


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

v2 is most up to date overall
V3 does alignment as a sum of last two college seasons

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(1)


Create a model grade temp table.  These reports are based off the draft model grades, so just make that the basis for which reports we have to make.
Since we use this to help make the pro model grades, that one uses position as the basis.


OUTPUT TABLES:
#temp_model_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_max_college_grade exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_max_college_grade') IS NOT NULL
	DROP TABLE #temp_max_college_grade

	SELECT re.player_id AS bane_player_id	
		,MAX(CAST(gr.[value] AS NUMERIC(3,1))) AS college_grade
	INTO #temp_max_college_grade
	FROM [BaneProductionAnalytics].dbo.reports re
	LEFT JOIN [BaneProductionAnalytics].dbo.grades gr
		ON re.grade_id = gr.id
	WHERE re.[type] IN ('fall','cross-check','post cc')
		AND re.is_deleted = 0
	GROUP BY re.player_id


	-- Check if #temp_model_grades, if it does drop it
	IF OBJECT_ID('tempdb..#temp_model_grades') IS NOT NULL
	DROP TABLE #temp_model_grades

	SELECT mg.bane_player_id
		,ncaa_gsis_id AS gsis_player_id
		,pl.position_id AS bane_position_id
		,po.team AS position_side_of_ball
		,CASE WHEN position IN ('OT','OG','OC') THEN 'OL'
			WHEN position IN ('DT','DE','OB') THEN 'DL'
			WHEN position IN ('TE','FB') THEN 'TE'
			WHEN position IN ('DC','DS') THEN 'DB'
			WHEN position = 'OH' THEN 'RB'
			WHEN position = 'WO' THEN 'WR'
			ELSE position
		END AS position_model_group
		,draft_model_year
		,draft_year
		,162 AS author_id
		,model_grade_id AS grade_id
		,measurables_percentile
		,production_percentile
		,component_grades_percentile
	INTO #temp_model_grades
	FROM Analytics.dbo.bane_draft_model_grades mg
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON mg.bane_player_id = pl.id
		AND pl.is_deleted = 0
	INNER JOIN BaneProductionAnalytics.dbo.positions po
		ON pl.position_id = po.id
	INNER JOIN #temp_max_college_grade cg
		ON mg.bane_player_id = cg.bane_player_id
		AND cg.college_grade >= 5.7
	WHERE 1 = 1
		--AND draft_model_year = 2021
		AND model_grade_id IS NOT NULL


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(2)

Get two players above and two players below on the sequence list.


OUTPUT TABLES:
#temp_analytics_sequences

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_analytics_sequence_ranks, if it does drop it
	IF OBJECT_ID('tempdb..#temp_analytics_sequence_ranks') IS NOT NULL
	DROP TABLE #temp_analytics_sequence_ranks

	SELECT bane_player_id
		,position
		,CONCAT(pl.goes_by,' ',pl.last_name) AS player
		,RANK() OVER (PARTITION BY draft_model_year, draft_year, position, secondary_position ORDER BY model_without_board_score DESC) AS position_sequence_rank
	INTO #temp_analytics_sequence_ranks
	FROM Analytics.dbo.analysis_players_draft_model_grades mg
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON mg.bane_player_id = pl.id
		AND pl.is_deleted = 0
	WHERE draft_model_year = 2021
		AND draft_year = 2021
		AND draft_model_version = 'POST_COMBINE'
		AND draft_model_type = 'SALARIES'
		AND secondary_position = 0


	-- Check if #temp_analytics_sequence_neighbors, if it does drop it
	IF OBJECT_ID('tempdb..#temp_analytics_sequence_neighbors') IS NOT NULL
	DROP TABLE #temp_analytics_sequence_neighbors

	SELECT sr.bane_player_id
		,sr.player
		,sr.position
		,sr.position_sequence_rank
		,CASE WHEN s1.bane_player_id IS NOT NULL AND s2.bane_player_id IS NOT NULL THEN CONCAT(s1.player,', ',s2.player) 
			WHEN s2.bane_player_id IS NOT NULL THEN s2.player
			ELSE NULL
		END AS two_above
		,CASE WHEN s3.bane_player_id IS NOT NULL AND s4.bane_player_id IS NOT NULL THEN CONCAT(s3.player,', ',s4.player)
			WHEN s4.bane_player_id IS NOT NULL THEN s4.player
			ELSE NULL
		END AS two_below
	INTO #temp_analytics_sequence_neighbors
	FROM #temp_analytics_sequence_ranks sr
	LEFT JOIN #temp_analytics_sequence_ranks s1
		ON sr.position = s1.position
		AND sr.position_sequence_rank = s1.position_sequence_rank + 2
	LEFT JOIN #temp_analytics_sequence_ranks s2
		ON sr.position = s2.position
		AND sr.position_sequence_rank = s2.position_sequence_rank + 1
	LEFT JOIN #temp_analytics_sequence_ranks s3
		ON sr.position = s3.position
		AND sr.position_sequence_rank = s3.position_sequence_rank - 1
	LEFT JOIN #temp_analytics_sequence_ranks s4
		ON sr.position = s4.position
		AND sr.position_sequence_rank = s4.position_sequence_rank - 2
	WHERE sr.player = 'Joseph Ossai'

	
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(2)


Create a table with all the positions a player played in a season. You need the overall position along with all the percentages (for the alignment field).

Defense and offense positions are kept in different tables, so do defense then append offense to it.

Order the positions played from most to least so they look good in the alignment variable.

For the pro version of these, the position table is the basis because you need a position for a report.  For college, the model grades table is the basis,
because you need a model grade to build these off of.


OUTPUT TABLES:
#temp_season_positions

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_season_positions_all exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_season_positions_all') IS NOT NULL
	DROP TABLE #temp_season_positions_all

	SELECT bane_player_id
		,ag.gsis_player_id
		,draft_year
		,draft_year - 1 AS season
		,season_type_adjusted
		,CASE WHEN position_blt IN ('IB','MIKE','WILL') AND po.translation = 'DS' THEN 'DS'
			ELSE position_blt
		END AS position_blt
		,CASE WHEN position_blt IN ('NT','DT3T') THEN 'DT'
			WHEN position_blt IN ('OB34','RUSH','SAM','DE43') THEN 'EDGE'
			WHEN position_blt IN ('IB','MIKE','WILL') AND po.translation = 'DS' THEN 'DS'
			WHEN position_blt IN ('IB','MIKE','WILL') THEN 'IB'
			--WHEN position_blt IN ('CB','NB','FS','SS','DS') THEN 'DB'
			WHEN position_blt IN ('CB','NB') THEN 'CB'
			WHEN position_blt IN ('FS','SS','DS') THEN 'DS'
			WHEN position_blt IN ('LOT','LOG','OC','ROG','ROT') THEN 'OL'
			WHEN position_blt IN ('TE') AND po.translation IN ('OT','OG','OC') THEN 'OL'
			ELSE position_blt
		END AS position_group_blt
		,SUM(snap_count_all) AS snap_count_all
		,SUM(snap_count_nt) AS snap_count_nt
		,SUM(snap_count_dt3t) AS snap_count_dt3t
		,SUM(snap_count_de5t) AS snap_count_de5t
		,SUM(snap_count_de43) AS snap_count_de43
		,SUM(snap_count_rush) AS snap_count_rush
		,SUM(snap_count_sam) AS snap_count_sam
		--,snap_count_ob34
		,SUM(snap_count_mike) AS snap_count_mike
		,SUM(snap_count_will) AS snap_count_will
		--,snap_count_ib
		,SUM(snap_count_cb) AS snap_count_cb
		,SUM(snap_count_nb) AS snap_count_nb
		--,snap_count_ds
		,SUM(snap_count_fs) AS snap_count_fs 
		,SUM(snap_count_ss) AS snap_count_ss
		,NULL AS snap_count_qb
		,NULL AS snap_count_rb
		,NULL AS snap_count_fb
		,NULL AS snap_count_wide
		,NULL AS snap_count_te
		,NULL AS snap_count_slot
		,NULL AS snap_count_lot
		,NULL AS snap_count_log
		,NULL AS snap_count_oc
		,NULL AS snap_count_rog
		,NULL AS snap_count_rot
	INTO #temp_season_positions_all
	FROM Analytics.dbo.analysis_players_season_position_defense_college de
	INNER JOIN #temp_model_grades ag
		ON de.gsis_player_id = ag.gsis_player_id
	INNER JOIN BaneProductionAnalytics.dbo.positions po
		ON ag.bane_position_id = po.id
	WHERE position_side_of_ball = 'defense'
		AND defense_type = 'ALL'
		AND snap_count_all > 0
		AND de.season >= draft_year - 2
	GROUP BY bane_player_id
		,ag.gsis_player_id
		,draft_year
		,draft_year - 1
		,season_type_adjusted
		,CASE WHEN position_blt IN ('IB','MIKE','WILL') AND po.translation = 'DS' THEN 'DS'
			ELSE position_blt
		END
		,CASE WHEN position_blt IN ('NT','DT3T') THEN 'DT'
			WHEN position_blt IN ('OB34','RUSH','SAM','DE43') THEN 'EDGE'
			WHEN position_blt IN ('IB','MIKE','WILL') AND po.translation = 'DS' THEN 'DS'
			WHEN position_blt IN ('IB','MIKE','WILL') THEN 'IB'
			--WHEN position_blt IN ('CB','NB','FS','SS','DS') THEN 'DB'
			WHEN position_blt IN ('CB','NB') THEN 'CB'
			WHEN position_blt IN ('FS','SS','DS') THEN 'DS'
			WHEN position_blt IN ('LOT','LOG','OC','ROG','ROT') THEN 'OL'
			WHEN position_blt IN ('TE') AND po.translation IN ('OT','OG','OC') THEN 'OL'
			ELSE position_blt
		END


	INSERT INTO #temp_season_positions_all
	SELECT bane_player_id
		,ag.gsis_player_id
		,draft_year
		,draft_year - 1 AS season
		,season_type_adjusted
		,CASE WHEN position_blt IN ('TE') AND po.translation IN ('OT','OG','OC') THEN 'OG'
			ELSE position_blt
		END AS position_blt
		,CASE WHEN position_blt IN ('NT','DT3T') THEN 'DT'
			WHEN position_blt IN ('OB34','RUSH','SAM','DE43') THEN 'EDGE'
			WHEN position_blt IN ('IB','MIKE','WILL') AND po.translation = 'DS' THEN 'DS'
			WHEN position_blt IN ('IB','MIKE','WILL') THEN 'IB'
			--WHEN position_blt IN ('CB','NB','FS','SS','DS') THEN 'DB'
			WHEN position_blt IN ('CB','NB') THEN 'CB'
			WHEN position_blt IN ('FS','SS','DS') THEN 'DS'
			WHEN position_blt IN ('LOT','LOG','OC','ROG','ROT') THEN 'OL'
			WHEN position_blt IN ('TE') AND po.translation IN ('OT','OG','OC') THEN 'OL'
			ELSE position_blt
		END AS position_group_blt
		,SUM(snap_count_all) AS snap_count_all
		,NULL AS snap_count_nt
		,NULL AS snap_count_dt3t
		,NULL AS snap_count_de5t
		,NULL AS snap_count_de43
		,NULL AS snap_count_rush
		,NULL AS snap_count_sam
		--,NULL AS snap_count_ob34
		,NULL AS snap_count_mike
		,NULL AS snap_count_will
		--,NULL AS snap_count_ib
		,NULL AS snap_count_cb
		,NULL AS snap_count_nb
		--,NULL AS snap_count_ds
		,NULL AS snap_count_fs
		,NULL AS snap_count_ss
		,SUM(snap_count_qb) AS snap_count_qb
		,SUM(snap_count_rb) AS snap_count_rb
		,SUM(snap_count_fb) AS snap_count_fb
		,SUM(snap_count_wide) AS snap_count_wide
		,SUM(snap_count_te) AS snap_count_te
		,SUM(snap_count_slot) AS snap_count_slot
		,SUM(snap_count_lot) AS snap_count_lot
		,SUM(snap_count_log) AS snap_count_log
		,SUM(snap_count_oc) AS snap_count_oc
		,SUM(snap_count_rog) AS snap_count_rog
		,SUM(snap_count_rot) AS snap_count_rot
	FROM Analytics.dbo.analysis_players_season_position_offense_college de
	INNER JOIN #temp_model_grades ag
		ON de.gsis_player_id = ag.gsis_player_id
	INNER JOIN BaneProductionAnalytics.dbo.positions po
		ON ag.bane_position_id = po.id
	WHERE position_side_of_ball = 'offense'
		AND snap_count_all > 0
		AND de.season >= draft_year - 2
	GROUP BY bane_player_id
		,ag.gsis_player_id
		,draft_year
		,draft_year - 1
		,season_type_adjusted
		,CASE WHEN position_blt IN ('TE') AND po.translation IN ('OT','OG','OC') THEN 'OG'
			ELSE position_blt
		END
		,CASE WHEN position_blt IN ('NT','DT3T') THEN 'DT'
			WHEN position_blt IN ('OB34','RUSH','SAM','DE43') THEN 'EDGE'
			WHEN position_blt IN ('IB','MIKE','WILL') AND po.translation = 'DS' THEN 'DS'
			WHEN position_blt IN ('IB','MIKE','WILL') THEN 'IB'
			--WHEN position_blt IN ('CB','NB','FS','SS','DS') THEN 'DB'
			WHEN position_blt IN ('CB','NB') THEN 'CB'
			WHEN position_blt IN ('FS','SS','DS') THEN 'DS'
			WHEN position_blt IN ('LOT','LOG','OC','ROG','ROT') THEN 'OL'
			WHEN position_blt IN ('TE') AND po.translation IN ('OT','OG','OC') THEN 'OL'
			ELSE position_blt
		END


-- Check if #temp_season_positions_unpivot exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_season_positions_unpivot') IS NOT NULL
		DROP TABLE #temp_season_positions_unpivot

	SELECT bane_player_id
		,draft_year
		,season
		,season_type_adjusted
		,CAST(UPPER(REPLACE(position_name,'snap_count_','')) AS NVARCHAR(4)) AS position_snaps
		,value AS snap_count
		,RANK() OVER (PARTITION BY bane_player_id, season, season_type_adjusted ORDER BY value DESC) AS position_rank
	INTO #temp_season_positions_unpivot
	FROM #temp_season_positions_all
	UNPIVOT (value FOR position_name IN (snap_count_nt
										,snap_count_dt3t
										,snap_count_de5t
										,snap_count_de43
										,snap_count_rush
										,snap_count_sam
										--,snap_count_ob34
										,snap_count_mike
										,snap_count_will
										--,snap_count_ib
										,snap_count_cb
										,snap_count_nb
										--,snap_count_ds
										,snap_count_ss
										,snap_count_fs
										,snap_count_qb
										,snap_count_rb
										,snap_count_fb
										,snap_count_wide
										,snap_count_te
										,snap_count_slot
										,snap_count_lot
										,snap_count_log
										,snap_count_oc
										,snap_count_rog
										,snap_count_rot
							)) AS me


-- Check if #temp_season_positions_display exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_season_positions_display') IS NOT NULL
		DROP TABLE #temp_season_positions_display

	SELECT up.*
		,CONCAT(', ',position_snaps,' (',CAST(ROUND(CAST(CASE WHEN snap_count > snap_count_all THEN snap_count_all ELSE snap_count END AS FLOAT) / NULLIF(snap_count_all,0) * 100,0) AS NVARCHAR(3)),'%)') AS position_display
	INTO #temp_season_positions_display
	FROM #temp_season_positions_unpivot up
	INNER JOIN #temp_season_positions_all sp
		ON up.bane_player_id = sp.bane_player_id
		AND up.season = sp.season
		AND up.season_type_adjusted = sp.season_type_adjusted
	WHERE snap_count > 0
		AND position_rank <= 5
		AND (CAST(snap_count AS FLOAT) / NULLIF(snap_count_all,0)) >= 0.05


-- Check if #temp_season_positions_pivot exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_positions_pivot') IS NOT NULL
	DROP TABLE #temp_season_positions_pivot

	SELECT bane_player_id
		,season
		,season_type_adjusted
		,SUBSTRING(CONCAT([1],[2],[3],[4],[5]),3,255) AS alignment
	INTO #temp_season_positions_pivot
	FROM (
	SELECT bane_player_id
		,season
		,season_type_adjusted
		,position_rank
		,position_display
	FROM #temp_season_positions_display) up
	PIVOT(MAX(position_display) FOR position_rank IN ([1],[2],[3],[4],[5])) AS pvt
	ORDER BY bane_player_id


-- Check if #temp_season_positions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_season_positions') IS NOT NULL
	DROP TABLE #temp_season_positions

	SELECT sp.bane_player_id
		,draft_year
		,sp.gsis_player_id
		,sp.season
		,sp.season_type_adjusted
		,position_blt
		,position_group_blt
		,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(alignment,'LOT','LT'),'LOG','LG'),'ROT','RT'),'ROG','RG'),'WR','WIDE'),'SLT','SLOT') AS alignment
	INTO #temp_season_positions
	FROM #temp_season_positions_all sp
	INNER JOIN #temp_season_positions_pivot pv
		ON sp.bane_player_id = pv.bane_player_id
		AND sp.season = pv.season
		AND sp.season_type_adjusted = pv.season_type_adjusted
	WHERE (sp.season = draft_year OR sp.season = draft_year - 1)
		AND sp.season_type_adjusted = 'REGPOST'



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(#)

Find the model feature contributions - this is how you can get model traits onto a 3-7 scale.

Rank the features for each player from biggest to lowest impact (using absolute value, since you just want the biggest impact whether it is good or bad).  As part of
this, certain features (null, 0, or conferences) that we dont' want to display get assigned a sort value to make sure they won't be in the top 3 display features - 
but we still want them included in this step to get overall feature contribution percentage.

We also rank each feature within its feature group (for example, sacks per game and sacks per snap are the same "group" - we don't want a player's top 3 displayed
features all to just be slightly differnt versions of the same thing.)  In the next step you rank the features using both to come up with the top 3 "display" features
(you can't do it in one step because you can't do one windowed function inside another).  For production, since you want to make sure competition level shows, make
whatever is the 3rd ranked based on the logic have a rank of 3.5 and insert the competition level as rank 3.  This way you can easily see which feature got kicked out.

The 3-7 percentile comes from ranking the values of that feature amongst all players who have that feature in their model score.  Join in a "lower is better" variable
that is 1 if you want higher scores, -1 if you want lower scores so that sorting DESC always gets the correct scores in the top 10%.

Also do max college grade because you only want to use players who have a 5.7 when turning the features into grades.


OUTPUT TABLES:
#temp_feature_contributions

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_feature_contribution_counts exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_feature_contribution_counts') IS NOT NULL
	DROP TABLE #temp_feature_contribution_counts

	SELECT feature_category
		,feature
		,position_model_group
		,COUNT(*) AS feature_count
	INTO #temp_feature_contribution_counts
	FROM AnalyticsSandbox.dbo._draft_model_feature_contributions_2021 fc
	INNER JOIN #temp_max_college_grade cg
		ON fc.bane_player_id = cg.bane_player_id
		AND cg.college_grade >= 5.7
	INNER JOIN #temp_model_grades mg
		ON fc.bane_player_id = mg.bane_player_id
	GROUP BY feature_category
		,feature
		,position_model_group


	-- Check if #temp_feature_contribution_grades exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_feature_contribution_grades') IS NOT NULL
	DROP TABLE #temp_feature_contribution_grades

	SELECT fc.*
		,RANK() OVER (PARTITION BY fc.bane_player_id, fc.feature_category ORDER BY CASE WHEN ((fc.[value] IS NULL AND fc.feature_category = 'components') OR fc.[value] = 0 OR fc.feature LIKE 'conference%') THEN -999999 ELSE ABS(feature_contributions) END DESC) AS feature_rank
		,RANK() OVER (PARTITION BY fc.bane_player_id, feature_group ORDER BY ABS(feature_contributions) DESC) AS feature_group_rank
		,ABS(feature_contributions) / NULLIF((SELECT SUM(ABS(feature_contributions)) FROM AnalyticsSandbox.dbo._draft_model_feature_contributions_2021 fc2 WHERE fc.bane_player_id = fc2.bane_player_id),0) AS feature_percentage
		,CASE WHEN cc.feature_count < 10 THEN NULL ELSE
			(CASE WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY [value] * mf.lower_is_better DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.90 THEN 7
						WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY [value] * mf.lower_is_better DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.75 THEN 6
						WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY [value] * mf.lower_is_better DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.40 THEN 5
						WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY [value] * mf.lower_is_better DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.15 THEN 4
						ELSE 3 
			END) 
		END AS feature_grade
		/*,(CASE WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY fc.feature_contributions DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.90 THEN 7
					WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY fc.feature_contributions DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.75 THEN 6
					WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY fc.feature_contributions DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.40 THEN 5
					WHEN (feature_count - RANK() OVER (PARTITION BY fc.feature_category, fc.feature ORDER BY fc.feature_contributions DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.15 THEN 4
					ELSE 3 
		END) AS feature_grade*/
		,feature_explanation
	--INTO #temp_feature_contribution_grades
	FROM AnalyticsSandbox.dbo._draft_model_feature_contributions_2021 fc
	LEFT JOIN Analytics.dbo.map_draft_model_features mf
		ON fc.feature = mf.feature
		AND fc.feature_category = mf.feature_category
	INNER JOIN #temp_model_grades mg
		ON fc.bane_player_id = mg.bane_player_id
	LEFT JOIN #temp_feature_contribution_counts cc
		ON fc.feature_category = cc.feature_category
		AND fc.feature = cc.feature
		AND CASE WHEN cc.feature = 'ps_play_making' AND mg.position_model_group  ='TE' THEN 'WR' 
			WHEN cc.feature IN ('ps_play_making','ps_ball_protection','ps_inside_run','ps_outside_run','ps_pass_blocking','ps_vision_instincts') AND mg.position_model_group  ='TE' THEN 'RB' 
			ELSE mg.position_model_group END = cc.position_model_group
	INNER JOIN #temp_max_college_grade cg
		ON fc.bane_player_id = cg.bane_player_id
		AND cg.college_grade >= 5.7
	WHERE mf.is_excluded = 0



	-- Check if #temp_feature_contributions exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_feature_contributions') IS NOT NULL
	DROP TABLE #temp_feature_contributions

	SELECT *
		,CASE WHEN feature_category = 'production' AND RANK() OVER (PARTITION BY bane_player_id, feature_category ORDER BY CASE WHEN feature_group_rank > 1 THEN 9999999 ELSE feature_rank END) = 3 THEN 3.5
			ELSE RANK() OVER (PARTITION BY bane_player_id, feature_category ORDER BY CASE WHEN feature_group_rank > 1 THEN 9999999 ELSE feature_rank END)
		END AS feature_display_rank
	INTO #temp_feature_contributions
	FROM #temp_feature_contribution_grades


	INSERT INTO #temp_feature_contributions
	--split out by model position or something, look at variance of it this position vs others.
	SELECT fc.bane_player_id
		,fc.feature
		,fc.[value]
		,fc.feature_contributions
		,fc.feature_category
		,NULL AS feature_rank
		,NULL AS feature_group_rank
		,NULL AS feature_percentage
		,(CASE WHEN (feature_count - RANK() OVER (ORDER BY CASE WHEN fc.feature = 'conference_division_FBS' THEN fc.feature_contributions + 4000000 WHEN fc.feature = 'conference_division_FCS' THEN fc.feature_contributions + 3000000 WHEN fc.feature = 'conference_division_DIV_II' THEN fc.feature_contributions + 2000000 WHEN fc.feature = 'conference_division_DIV_III' THEN fc.feature_contributions + 1000000 ELSE fc.feature_contributions END DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.90 THEN 7
					WHEN (feature_count - RANK() OVER (ORDER BY CASE WHEN fc.feature = 'conference_division_FBS' THEN fc.feature_contributions + 4000000 WHEN fc.feature = 'conference_division_FCS' THEN fc.feature_contributions + 3000000 WHEN fc.feature = 'conference_division_DIV_II' THEN fc.feature_contributions + 2000000 WHEN fc.feature = 'conference_division_DIV_III' THEN fc.feature_contributions + 1000000 ELSE fc.feature_contributions END DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.75 THEN 6
					WHEN (feature_count - RANK() OVER (ORDER BY CASE WHEN fc.feature = 'conference_division_FBS' THEN fc.feature_contributions + 4000000 WHEN fc.feature = 'conference_division_FCS' THEN fc.feature_contributions + 3000000 WHEN fc.feature = 'conference_division_DIV_II' THEN fc.feature_contributions + 2000000 WHEN fc.feature = 'conference_division_DIV_III' THEN fc.feature_contributions + 1000000 ELSE fc.feature_contributions END DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.40 THEN 5
					WHEN (feature_count - RANK() OVER (ORDER BY CASE WHEN fc.feature = 'conference_division_FBS' THEN fc.feature_contributions + 4000000 WHEN fc.feature = 'conference_division_FCS' THEN fc.feature_contributions + 3000000 WHEN fc.feature = 'conference_division_DIV_II' THEN fc.feature_contributions + 2000000 WHEN fc.feature = 'conference_division_DIV_III' THEN fc.feature_contributions + 1000000 ELSE fc.feature_contributions END DESC) + 1) / CAST(feature_count AS FLOAT) >= 0.15 THEN 4
					ELSE 3 
		END) AS feature_grade
		,mf.feature_explanation
		,3 AS feature_display_rank
	FROM AnalyticsSandbox.dbo._draft_model_feature_contributions_2021 fc
	LEFT JOIN Analytics.dbo.map_draft_model_features mf
		ON fc.feature = mf.feature
		AND fc.feature_category = mf.feature_category
	LEFT JOIN #temp_feature_contribution_counts cc
		ON fc.feature_category = cc.feature_category
		AND fc.feature = cc.feature
	INNER JOIN #temp_max_college_grade cg
		ON fc.bane_player_id = cg.bane_player_id
		AND cg.college_grade >= 5.7
	WHERE mf.is_excluded = 0
		AND fc.feature LIKE 'conference%'
		AND fc.[value] = 1


	UPDATE #temp_feature_contributions
	SET feature_grade = 4
	WHERE feature_category = 'measurables'
		AND [value] IS NULL
		AND feature_grade = 3


/*
	select *
	from #temp_feature_contributions
	where bane_player_id = 261591
*/

	
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(###

Create the evaluations table.  

OUTPUT TABLES:
#temp_analytics_evaluations

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_analytics_evaluations, if it does drop it
	IF OBJECT_ID('tempdb..#temp_analytics_evaluations') IS NOT NULL
	DROP TABLE #temp_analytics_evaluations

	CREATE TABLE #temp_analytics_evaluations (
		bane_player_id INT
		,skill_id INT
		,skill_code NVARCHAR(50)
		,grade_id INT
		,explanation NVARCHAR(MAX)
	)

	INSERT INTO #temp_analytics_evaluations
	SELECT bane_player_id
		,CASE WHEN feature_category IN ('measurables') AND feature_display_rank = 1 THEN 1628
			WHEN feature_category IN ('measurables') AND feature_display_rank = 2 THEN 1629
			WHEN feature_category IN ('measurables') AND feature_display_rank = 3 THEN 1630
			WHEN feature_category IN ('production') AND feature_display_rank = 1 THEN 1631
			WHEN feature_category IN ('production') AND feature_display_rank = 2 THEN 1632
			WHEN feature_category IN ('production') AND feature_display_rank = 3 THEN 1633
			WHEN feature_category IN ('components') AND feature_display_rank = 1 THEN 1634
			WHEN feature_category IN ('components') AND feature_display_rank = 2 THEN 1635
			WHEN feature_category IN ('components') AND feature_display_rank = 3 THEN 1636
			ELSE NULL
		END AS skill_id
		,CASE WHEN feature_category IN ('measurables') AND feature_display_rank = 1 THEN 'A-M1'
			WHEN feature_category IN ('measurables') AND feature_display_rank = 2 THEN 'A-M2'
			WHEN feature_category IN ('measurables') AND feature_display_rank = 3 THEN 'A-M3'
			WHEN feature_category IN ('production') AND feature_display_rank = 1 THEN 'A-P1'
			WHEN feature_category IN ('production') AND feature_display_rank = 2 THEN 'A-P2'
			WHEN feature_category IN ('production') AND feature_display_rank = 3 THEN 'A-P3'
			WHEN feature_category IN ('components') AND feature_display_rank = 1 THEN 'A-CG1'
			WHEN feature_category IN ('components') AND feature_display_rank = 2 THEN 'A-CG2'
			WHEN feature_category IN ('components') AND feature_display_rank = 3 THEN 'A-CG3'
			ELSE NULL
		END AS skill_code
		,gr.id AS grade_id
		,CASE WHEN feature_category IN ('production') AND feature_display_rank = 3 THEN CONCAT(feature_explanation,'<br /><br />')	
			ELSE CONCAT(feature_explanation,'<br />(',CAST(CEILING(feature_percentage*100) AS NVARCHAR(3)),'% of model contribution)') 
		END AS explanation
		--,feature_grade
		--,feature_category
		--,feature_display_rank
	FROM #temp_feature_contributions fc
	INNER JOIN BaneProductionAnalytics.dbo.grades gr
		ON fc.feature_grade = gr.[value]
		AND gr.scale_id = 5
		AND gr.active = 1
	WHERE feature_display_rank IN (1,2,3)
	AND bane_player_id NOT IN (291440,282607,234368,233020,261205,286832,233195,261591,259632)
	ORDER BY feature_category, feature_display_rank


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(4)

Insert blank final summaries into the evaluations table that you can fill in with text later.

As of 06/14/2020 skill ids:
1611 - final summary (A-FINAL)
1612 - final summary update (A-FINALUPD)
1613 - revised final summary (A-RFS)
1614 - workout/misc. notes (A-MISCNOTES)

OUTPUT TABLES:
#temp_analytics_evaluations

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	
	INSERT INTO #temp_analytics_evaluations
	SELECT bane_player_id
		,1611 AS skill_id
		,'A-FINAL' AS skill_code
		,NULL AS grade_id
		,'' AS explanation
	FROM #temp_model_grades


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(5)


Get the previous report's grade so that you can put it into the updated report's explanation.

UPDATE TABLES:
#temp_analytics_evaluations

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_previous_report_grades exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_previous_report_grades') IS NOT NULL
	DROP TABLE #temp_previous_report_grades

	SELECT re.id
		,re.player_id  AS bane_player_id
		,1611 AS skill_id
		,CONCAT('Pre Combine Grade:  ',gr.[value]) AS explanation
	INTO #temp_previous_report_grades
	FROM Analytics.dbo.analytics_reports re
	INNER JOIN BaneProductionAnalytics.dbo.grades gr
		ON re.grade_id = gr.id
	WHERE re.exposure = '2022 Pre Combine'


	UPDATE #temp_analytics_evaluations
		SET explanation  = rg.explanation
	FROM #temp_previous_report_grades rg
	WHERE #temp_analytics_evaluations.bane_player_id = rg.bane_player_id
		AND #temp_analytics_evaluations.skill_id = rg.skill_id

	UPDATE #temp_analytics_evaluations
		SET explanation  = 'No Pre Combine Grade'
	WHERE skill_id = 1611
		AND explanation = ''


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(6)


Find all the existing reports for the current season. If a player already has a report, it gets updated. If he doesn't, then create a new one.

Write everything into a temp table then DELETE and INSERT into the Analytics table. It's cleaner than running update statements.

OUTPUT TABLES:
#temp_analytics_reports_with_seasons
Analytics.dbo.analytics_reports

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_analytics_reports_with_seasons exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_analytics_reports_with_seasons') IS NOT NULL
	DROP TABLE #temp_analytics_reports_with_seasons

	SELECT re.id
		,gr.author_id
		,gr.grade_id
		,po.id AS position_id
		,'analytics-college' AS [type]
		,0 AS submitted
		,re.created_at
		,GETDATE() AS updated_at
		,rp.bane_player_id AS player_id
		,rp.alignment
		,0 AS [imported_with_errors]
		,0 AS [is_deleted]
		,'2022 Pre Combine' AS [exposure]
		,NULL AS [import_key]
		,NULL AS [revised_overall_grade_id]
		,'' AS [legacy_grade]
		,NULL AS [stratbridge_season_id]
		,0 AS [incomplete]
		,NULL AS [all_star_game_id]
	INTO #temp_analytics_reports_with_seasons
	FROM Analytics.dbo.analytics_reports re
	INNER JOIN #temp_season_positions rp
		ON re.player_id = rp.bane_player_id
		AND rp.season = 2021
	INNER JOIN BaneProductionAnalytics.dbo.positions po
		ON rp.position_blt = po.code
	INNER JOIN #temp_model_grades gr
		ON rp.bane_player_id = gr.bane_player_id
	WHERE re.exposure = '2022 Pre Combine'

--
-- Update the next id table to 299999
-- THIS IS JUST FOR TESTING, WHEN YOU GO LIVE REMOVE THIS
--
	--UPDATE [Analytics].[dbo].surrogate_key
	--SET next_key = 299999
	--WHERE table_name = 'analytics_reports'

-- Find the next unique report id 
	DECLARE @next_report_id INT
	EXEC Analytics.dbo.sp_get_next_surrogate_key 'analytics_reports', @next_report_id OUTPUT

	INSERT INTO #temp_analytics_reports_with_seasons
	SELECT @next_report_id  + ROW_NUMBER() OVER (ORDER BY rp.bane_player_id, rp.season, rp.season_type_adjusted) AS id
		,gr.author_id
		,gr.grade_id
		,po.id AS position_id
		,'analytics college' AS [type]
		,0 AS submitted
		,GETDATE() AS created_at
		,GETDATE() AS updated_at
		,rp.bane_player_id AS player_id
		,alignment
		,0 AS [imported_with_errors]
		,0 AS [is_deleted]
		,'2022 Pre Combine' AS [exposure]
		,NULL AS [import_key]
		,NULL AS [revised_overall_grade_id]
		,'' AS [legacy_grade]
		,NULL AS [stratbridge_season_id]
		,0 AS [incomplete]
		,NULL AS [all_star_game_id]
	FROM #temp_season_positions rp
	INNER JOIN BaneProductionAnalytics.dbo.positions po
		ON rp.position_blt = po.code
	INNER JOIN #temp_model_grades gr
		ON rp.bane_player_id = gr.bane_player_id
	--WHERE rp.bane_player_id NOT IN (SELECT player_id FROM #temp_analytics_reports_with_seasons)


	DELETE FROM Analytics.dbo.analytics_reports WHERE id IN (SELECT id FROM #temp_analytics_reports_with_seasons)
	INSERT INTO Analytics.dbo.analytics_reports
	SELECT id
		,author_id
		,grade_id
		,position_id
		,[type]
		,submitted
		,created_at
		,updated_at
		,player_id
		,alignment
		,[imported_with_errors]
		,[is_deleted]
		,[exposure]
		,[import_key]
		,[revised_overall_grade_id]
		,[legacy_grade]
		,[stratbridge_season_id]
		,[incomplete]
		,[all_star_game_id]
	FROM #temp_analytics_reports_with_seasons rp
	ORDER BY id


-- Update the next id table with all the ones you just wrote in
	UPDATE [Analytics].[dbo].surrogate_key
	SET next_key = (SELECT MAX(id) FROM Analytics.dbo.analytics_reports)
	WHERE table_name = 'analytics_reports'


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(7)

Find all the existing evaluations for the current season. If a player already has an evaluation, it gets updated. If he doesn't, then create a new one.

Write everything into a temp table then DELETE and INSERT into the Analytics table. It's cleaner than running update statements.


OUTPUT TABLES:
#temp_analytics_evaluations_with_seasons
Analytics.dbo.analytics_evaluations

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_analytics_evaluations_with_seasons exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_analytics_evaluations_with_seasons') IS NOT NULL
	DROP TABLE #temp_analytics_evaluations_with_seasons

	SELECT ae.id
		,ae.skill_id
		,ISNULL(ev.grade_id,ae.grade_id) AS grade_id
		,re.id AS report_id
		,CASE WHEN ev.skill_id IS NULL THEN ae.explanation
			WHEN ev.skill_id NOT IN (1611) THEN ISNULL(ev.explanation,'Not enough snaps to assign a grade.') 
			ELSE ev.explanation 
		END AS explanation
		,ae.created_at
		,GETDATE() AS updated_at
		,CASE WHEN ev.bane_player_id IS NULL THEN 1 ELSE 0 END AS is_deleted
		,NULL AS interview_id
		,NULL AS advance_id
		,ae.skill_code
	INTO #temp_analytics_evaluations_with_seasons
	FROM Analytics.dbo.analytics_evaluations ae
	INNER JOIN Analytics.dbo.analytics_reports re
		ON ae.report_id = re.id
		AND re.exposure = '2022 Pre Combine'
	LEFT JOIN #temp_analytics_evaluations ev
		ON re.player_id = ev.bane_player_id
		AND ae.skill_id = ev.skill_id


--
-- Update the next id table to 299999
-- THIS IS JUST FOR TESTING, WHEN YOU GO LIVE REMOVE THIS
--
	--UPDATE [Analytics].[dbo].surrogate_key
	--SET next_key = 299999
	--WHERE table_name = 'analytics_evaluations'

-- Find the next unique report id 
	DECLARE @next_eval_id INT
	EXEC Analytics.dbo.sp_get_next_surrogate_key 'analytics_evaluations', @next_eval_id OUTPUT


	INSERT INTO #temp_analytics_evaluations_with_seasons
	SELECT @next_eval_id  + ROW_NUMBER() OVER (ORDER BY ev.bane_player_id, ev.skill_id) AS id
		,ev.skill_id
		,ev.grade_id
		,re.id AS report_id
		,CASE WHEN ev.skill_id NOT IN (1611) THEN ISNULL(explanation,'Not enough snaps to assign a grade.') ELSE explanation END AS explanation
		,GETDATE() AS created_at
		,GETDATE() AS updated_at
		,0 AS is_deleted
		,NULL AS interview_id
		,NULL AS advance_id
		,ev.skill_code
	FROM Analytics.dbo.analytics_reports re
	INNER JOIN #temp_analytics_evaluations ev
		ON re.player_id = ev.bane_player_id
	WHERE re.exposure = '2022 Pre Combine'
		AND CONCAT(re.id,'_',ev.skill_id) NOT IN (SELECT CONCAT(report_id,'_',skill_id) FROM #temp_analytics_evaluations_with_seasons)


	DELETE FROM Analytics.dbo.analytics_evaluations WHERE report_id IN (SELECT id FROM Analytics.dbo.analytics_reports WHERE exposure = '2022 Pre Combine')
	INSERT INTO Analytics.dbo.analytics_evaluations
	SELECT id
		,skill_id
		,grade_id
		,report_id
		,explanation
		,created_at
		,updated_at
		,is_deleted
		,interview_id
		,advance_id
		,skill_code
	FROM #temp_analytics_evaluations_with_seasons
	ORDER BY id


-- Update the next id table with all the ones you just wrote in
	UPDATE [Analytics].[dbo].surrogate_key
	SET next_key = (SELECT MAX(id) FROM Analytics.dbo.analytics_evaluations)
	WHERE table_name = 'analytics_evaluations'


